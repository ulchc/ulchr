% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/page_search.R
\name{page_search}
\alias{page_search}
\title{Search through text for matching terms and return a tibble}
\usage{
page_search(char_list, term, detail_level = c("page", "paragraph", "line"))
}
\arguments{
\item{char_list}{A vector of characters (assumed to represent pages of text).}

\item{term}{A string to locate in the vector of characters.}

\item{detail_level}{One of: \code{c("page", "paragraph", "line")}.}
}
\value{
A tibble with columns \code{query}, \code{page}, \code{detail_level}, and \code{value}.
}
\description{
Returns sequences of characters at the \code{detail_level} specified, with each row
of the tibble containing the matching \code{term}. Special characters in \code{term}
are interpreted as fixed strings, however, "\code{|}" can be used to permit either-or
searching for multiple terms.
}
\details{
This function was written for use with \code{\link[pdftools:pdftools]{pdftools::pdf_text()}} or
\code{\link[pdftools:pdf_ocr]{pdftools::pdf_ocr_text()}}, meaning that each item in the character vector is
assumed to be a page and is labeled as such on the returned tibble. If each
item is not representative of a page, the page column will only represent the
index of the original character vector.
}
\examples{
\dontrun{
# return the R manual folder path
r_manual_dir <- paste0(R.home("doc"), .Platform$file.sep, "manual")

# return the first pdf manual in the directory
latest_match <- files_matching(r_manual_dir, "pdf")$path[1]

manual_text <- pdftools::pdf_text(latest_match)

page_search(
  char_list = manual_text,
  term = "data",
  detail_level = "line"
)
}
}
\seealso{
\code{\link[=flatten_pages]{flatten_pages()}}
}
